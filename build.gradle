['java', 'distribution', 'maven', 'signing'].each { apply plugin: it }

assert org.gradle.api.JavaVersion.current().isJava6Compatible()
if (org.gradle.api.JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

group = 'com.fifesoft'
archivesBaseName = 'languagesupport'

dependencies {
	compile group: 'org.mozilla', name: 'rhino', version: '1.7.6'
	testCompile group: 'junit', name: 'junit', version: '4.11'
}

// Regenerate local gradlew
task wrapper(type: Wrapper) {
	gradleVersion = '2.14'
}

compileJava {
	sourceCompatibility javaVersion
	targetCompatibility javaVersion
	classpath += files("${projectDir.absolutePath}/../RSyntaxTextArea/build/classes/main",
		"${projectDir.absolutePath}/../AutoComplete/build/classes/main")
	options.debug = true
	options.debugOptions.debugLevel = 'source,vars,lines'
	// Most folks will compile with the latest JDK available, but official builds
	// use a Java 6 JDK.  Add this property to gradle.properties for boot classpath
	if (project.hasProperty('java6CompileBootClasspath')) {
		if (new File(java6CompileBootClasspath).isFile()) {
			println "Bootstrap classpath when compiling Java: ${java6CompileBootClasspath}"
			options.bootClasspath = java6CompileBootClasspath
		}
		else {
			println "Warning: Specified java6CompileBootClasspath does not exist: ${java6CompileBootClasspath}"
		}
	}
	options.compilerArgs << "-Xlint:deprecation" << '-Xlint:unchecked'
}

ext.sharedManifest = manifest {
	attributes('Main-Class': 'org.fife.rsta.ac.demo.DemoApp',
		'Class-Path': 'rsyntaxtextarea.jar autocomplete.jar rhino-1.7.6.jar',
		'Specification-Title': 'RSyntaxTextArea Language Support',
		'Specification-Version': version,
		'Implementation-Title': 'org.fife.ui',
		'Implementation-Version': version)

}
jar {
	manifest { from sharedManifest }
}

// We use "distributions" to create the zip files uploaded to SourceForge
distributions {
	main {
		baseName = 'language_support'
		contents {
			from { [ 'build/libs', // The built jar
				     configurations.runtime, // all runtime dependencies (e.g. rhino)
				     '../RSyntaxTextArea/build/libs/RSyntaxTextArea-2.6.0-SNAPSHOT.jar',
					 '../AutoComplete/build/libs/AutoComplete-2.6.0-SNAPSHOT.jar',
				     'RSTALanguageSupport.License.txt', 'readme.txt' ] }
			rename 'RSyntaxTextArea-.*\\.jar', 'rsyntaxtextarea.jar'
			rename 'AutoComplete-.*\\.jar', 'autocomplete.jar'
			rename 'languagesupport-.*\\.jar', 'language_support.jar'
		}
	}
	src {
		baseName = 'language_support'
	}
}
distZip.classifier = null
distZip.dependsOn jar
srcDistZip.classifier = 'src'
srcDistZip {
	from projectDir
	include 'src/**/*'
	include 'data/**/*'
	include 'build.gradle'
	include '.classpath'
	include '.project'
	include 'gradle.properties'
	include 'gradlew*'
	include 'gradle/**/*'
	include 'README.*'
	include 'readme*'
	include '.settings/**'
}

task buildSourceForgeZips << {
	println "Building zip files for SourceForge"
}
buildSourceForgeZips.dependsOn clean, jar, distZip, srcDistZip

// Stuff to generate and upload Maven artifacts
task javadocJar (type: Jar, dependsOn: javadoc) {
	manifest { from sharedManifest }
	classifier = 'javadoc'
	from javadoc.destinationDir
}
task sourceJar (type: Jar) {
	manifest { from sharedManifest }
	classifier = 'sources'
	from sourceSets.main.allSource
}
artifacts {
	archives jar, javadocJar, sourceJar
}
signing {
	// Don't require signing for e.g. ./gradlew install
	required { gradle.taskGraph.hasTask("uploadArchives") }
	sign configurations.archives
}
repositories {
	mavenCentral()
}
uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			if (project.hasProperty('upload') && Boolean.parseBoolean(upload)) { // gradlew uploadArchives -Pupload=true
				repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
				snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
			}
			else {
				repository(url: 'file:///' + projectDir + '/../localMavenRepo')
			}
			pom {
				groupId = 'com.fifesoft'
				name = 'languagesupport'
				project {
					parent {
						groupId 'org.sonatype.oss'
						artifactId 'oss-parent'
						version '7'
						relativePath ''
					}
					
					groupId 'com.fifesoft'
					artifactId 'languagesupport'
					packaging 'jar'
					
					name 'LanguageSupport'
					description 'A library adding code completion and other advanced features for Java, JavaScript, Perl, and other languages to RSyntaxTextArea.'
					
					inceptionYear '2003'
					url 'http://www.fifesoft.com/rsyntaxtextarea/'
					licenses {
						license {
							name 'Modified BSD License'
							url 'https://github.com/bobbylight/RSTALanguageSupport/blob/master/RSTALanguageSupport.License.txt'
							distribution 'repo'
						}
					}
					
					scm {
						url 'https://github.com/bobbylight/RSTALanguageSupport'
						connection 'scm:git:git://github.com/bobbylight/RSTALanguageSupport'
						developerConnection 'scm:git:git@github.com:bobbylight/RSTALanguageSupport'
						if (!project.version.endsWith('-SNAPSHOT')) {
							tag project.version
						}
					}
					
					developers {
						developer {
							name 'Robert Futrell'
							url 'http://www.fifesoft.com'
							organization = 'Fifesoft' /* https://issues.gradle.org/browse/GRADLE-1200 */
							organizationUrl 'http://www.fifesoft.com/'
							roles {
								role 'architect'
								role 'developer'
							}
							timezone '0'
						}
					}
					
					// Manually add runtime dependencies since we don't have
					// a multi-project build set up properly
					dependencies {
						dependency {
							groupId 'com.fifesoft'
							artifactId 'rsyntaxtextarea'
							version project.version
						}
						dependency {
							groupId 'com.fifesoft'
							artifactId 'autocomplete'
							version project.version
						}
					}
					
					
					// Ugh, have to do this for the "build" section
					// http://stackoverflow.com/questions/27975786/trouble-injecting-the-build-block-while-exporting-a-maven-pom-xml-file-from-grad
					withXml {
						def pluginNode = asNode().appendNode('build').appendNode('plugins').appendNode('plugin')
						pluginNode.appendNode('artifactId', 'maven-compiler-plugin')
						pluginNode.appendNode('version', '3.5.1')
						def executionNode = pluginNode.appendNode('executions').appendNode('execution')
						executionNode.appendNode('id', 'default-compile')
						executionNode.appendNode('configuration').appendNode('source', javaVersion).
						      parent().appendNode('target', javaVersion)
					}
				}
			}
		}
	}
}
